@page "/employees"
@using CrudDemo.Models
@using CrudDemo.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<h3>Employees</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="NavigateToCreate">Add New Employee</button>
</div>

@if (employees == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Department</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Email</td>
                    <td>@employee.Department</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToEdit(employee.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee> employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/employees/create");
    }

    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        await EmployeeService.DeleteEmployeeAsync(id);
        employees = await EmployeeService.GetEmployeesAsync();
    }
}